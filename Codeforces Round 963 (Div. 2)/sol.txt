#include <iostream>
#include <vector>
#include <cstring>
using namespace std;
const int MAXN = 200001;
vector<int> tree[MAXN];
char C[MAXN];
int result[MAXN];
bool isPalindrome[MAXN];
bool visited[MAXN];
bool checkPalindrome(const string& s) {
    int n = s.size();
    for (int i = 0; i < n / 2; ++i) {
        if (s[i] != s[n - i - 1]) {
            return false;
        }
    }
    return true;
}
string dfs(int u) {
    visited[u] = true;
    string S = "";

    for (int v : tree[u]) {
        if (!visited[v]) {
            S += dfs(v);
        }
    }

    S += C[u];
    isPalindrome[u] = checkPalindrome(S);
    return S;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    
    int N;
    cin >> N;

    for (int i = 1; i < N; ++i) {
        int u, v;
        cin >> u >> v;
        tree[u].push_back(v);
        tree[v].push_back(u);
    }
    for (int i = 1; i <= N; ++i) {
        cin >> C[i];
    }

    memset(visited, false, sizeof(visited));
    dfs(1);

    int Q;
    cin >> Q;
    while (Q--) {
        int u;
        cin >> u;
        cout << (isPalindrome[u] ? 1 : 0) << "\n";
    }

    return 0;
}. 

// FIND PALIDROME 
Google

def calculateF(B, K):
    orPart = 0
    xorPart = 0
    for i in range(K):
        orPart |= B[i]
    for i in range(K, 2 * K):
        xorPart ^= B[i]
    return orPart + xorPart

def findMaxF(N, K, A):
    maxF = 0
    from itertools import combinations
    for subset in combinations(A, 2 * K):
        currentF = calculateF(subset, K)
        maxF = max(maxF, currentF)
    return maxF

def main():
    T = int(input())
    for _ in range(T):
        N, K = map(int, input().split())
        A = list(map(int, input().split()))
        print(findMaxF(N, K, A))

if name == "main":
    main()                   

// COMPLEX 
Google

#include <iostream>
#include <vector>
#include <algorithm>
#include <climits>
using namespace std;

int f(int id, int taken, int t1, int t2, int k, vector<int> &a, vector<vector<int>> &dp) {
    if (taken == 2 * k) {
        return t1 ^ t2;
    }
    if (id >= a.size()) {
        return INT_MIN;
    }
    if (dp[id][taken] != -1) {
        return dp[id][taken];
    }
    
    int take = INT_MIN, ntake = INT_MIN;
    
    if (taken >= k) {
        take = f(id + 1, taken + 1, t1, t2|a[id], k, a, dp);
    } else {
        take = f(id + 1, taken + 1, t1|a[id],t2, k, a, dp);
    }
    
    ntake = f(id + 1, taken, t1, t2, k, a, dp);
    
    return dp[id][taken] = max(take, ntake);
}

//OR XOR 
Google

#include <bits/stdc++.h>
using namespace std;

using ll = long long;
using ull = unsigned long long;
using lld = long double;

#define MOD 1000000007
#define INF 1e18
#define nline "\n"
#define pb push_back
#define ppb pop_back
#define mp make_pair
#define f first
#define s second
#define set_bits(x) __builtin_popcountll(x)
#define sz(x) ((int)(x).size())
#define all(x) (x).begin(), (x).end()
#define pi pair<int,int>
#define vi vector<int> 

const int N =7e3+1;
void solve() {
	vector<ll> dp(N,0);
	int q; cin>>q;
	while(q--){
		int type; cin>>type;
		int x; cin>>x;
		if(type==0){
			for(int i =N-1;i>=0;i--){
				if(i>=x) dp[i] += dp[i-x];
				dp[i] = ((dp[i]%MOD)+MOD)%MOD;
			}
			dp[x] += 1;
		}else if(type==1){
			dp[x]-=1;
			for(int i =0;i<N;i++){
				if(i>=x) dp[i] -=dp[i-x];
				dp[i]= ((dp[i]%MOD)+MOD)%MOD;
			}
		}else if(type==2){
			cout<<dp[x]%MOD<<" ";
		}
	}
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
#ifndef ONLINE_JUDGE
    freopen("Error.txt", "w", stderr);
#endif
    int tc = 1;
    for (int t = 1; t <= tc; t++) {
        solve();
    }
};
//subset queries

ll expo(ll a, ll b, ll mod) {ll res = 1; while (b > 0) {if (b & 1)res = (res * a) % mod; a = (a * a) % mod; b = b >> 1;} return res;}

ll AwesomeFactor(int n,vector<int> A){
	stack<int> s;
	vector<int> nS(n);
	for(int i = 0;i<n;i++){
		while(!s.empty() && A[s.top()]>A[i]){
			nS[s.top()] = i;
			s.pop();
		}
		s.push(i);
	}
	while(!s.empty()){
		nS[s.top()] = s.top();
		s.pop();
	}
	ll mindist = INT_MAX;
	ll constant = 0;
	for(int i=0;i<n;i++){
		if(nS[i]==i) continue;
		if((nS[i]-i)<mindist){
			mindist = nS[i]-i;
			constant = A[i]-A[nS[i]];
		}
	}
	ll ans = expo(1e8,n-mindist,MOD);
	ans = (constant*ans)%MOD;
	return ans;
}
//awesomeness

const int N = 26;
const int MOD = 1e9 + 7;
vector<vector<int>> adj, components, dp, allowed;
vector<int> component, vis;

void dfs(int u) {
    vis[u] = 1;
    component.push_back(u);

    for(auto &v: adj[u]) {
        if(vis[v])
            continue;
        dfs(v);
    }
}

int help(int i, int prev) {
    if(i < 0)
        return 1;
    if(dp[i][prev] != -1)
        return dp[i][prev];
    int ans = 0;
    for(int j = 1; j <= 26; j++) {
        if(allowed[j][prev])
            ans = (ans + 0ll + help(i - 1, j)) % MOD;
    }

    return dp[i][prev] = ans;
}

int countPairs(int n, int m, vector<vector<char>> edges) {
    adj.clear(); adj.resize(N + 1);
    vis.clear(); vis.resize(N + 1);
    dp.clear(); dp.resize(n, vector<int>(27, -1));
    allowed.clear(); allowed.resize(N + 1, vector<int>(N + 1, 1));
    components.clear();

    for(auto &edge: edges) {
        int u = (edge[0] - '0') + 1;
        int v = (edge[1] - '0') + 1;

        adj[u].push_back(v);
        adj[v].push_back(u);
    }

    for(int i = 1; i <= N; i++) {
        if(vis[i])
            continue;
        component.clear();
        dfs(i);

        components.push_back(component);
    }

    return help(n - 1, 0);
}
//reckon string


int threeNumbers(vector<int> a){
	int n = a.size();
	stack<int> s;
	vector<int> nG(n),pG(n);
	for(int i =0;i<n;i++){
		while(!s.empty() && a[s.top()]<a[i]){
			nG[s.top()] = i;
			s.pop();
		}
		s.push(i);
	}
	while(!s.empty()){
		nG[s.top()] = n;
		s.pop();
	}
	for(int i=n-1;i>=0;i--){
		while(!s.empty() &&a[s.top()]<a[i]){
			pG[s.top()]= i;
			s.pop();
		}
		s.push(i);
	}
	while(!s.empty()){
		pG[s.top()] = -1;
		s.pop();
	}
	// prefix max
	// suffix max
	vector<pair<int,int>> prefix(n),suffix(n);
	prefix[0] = {a[0],0};
	for(int i=1;i<n;i++){
		if(a[i]> prefix[i-1].first){
			prefix[i] ={a[i],i}; 
		}else{
			prefix[i]= prefix[i-1];
		}
	}
	suffix[n-1] ={a[n-1],n-1};
	for(int i=n-2;i>=0;i--){
		if(a[i]>suffix[i+1].first){
			suffix[i] ={a[i],i};
		}else{
			suffix[i]= suffix[i+1];
		}
	}
	int ans =0;
	for(int i=0;i<n;i++){
		int left = pG[i],right = nG[i];
		if(pG[i]==-1){
			if(i!=0){
				left = prefix[i-1].second;
			}
		}
		if(nG[i]==n){
			if(i!=n-1){
				right = suffix[i+1].second;
			}
		}
		ans = max(ans,right-left);
	}
	return ans;
}
//three numbers

import itertools

def manhattan_dist(x1, y1, x2, y2):
    return abs(x1 - x2) + abs(y1 - y2)

def solve_min_distance(N, items, S):
    Sx, Sy = S
    dp = [float('inf')] * (1 << N)
    dp[0] = 0
    
    # Precompute all distances
    dist = {}
    for i in range(N):
        for j in range(i, N):
            dist[(i, j)] = manhattan_dist(items[i][0], items[i][1], items[j][0], items[j][1])
            dist[(j, i)] = dist[(i, j)]
    
    for mask in range(1 << N):
        for i in range(N):
            if not (mask & (1 << i)):
                continue
            for j in range(i, N):
                if not (mask & (1 << j)):
                    continue
                # Transition to new state by picking item i and item j
                new_mask = mask & ~(1 << i) & ~(1 << j)
                dist_to_s = manhattan_dist(Sx, Sy, items[i][0], items[i][1])
                if i != j:
                    dist_to_s += manhattan_dist(items[i][0], items[i][1], items[j][0], items[j][1])
                    dist_to_s += manhattan_dist(items[j][0], items[j][1], Sx, Sy)
                else:
                    dist_to_s += manhattan_dist(items[i][0], items[i][1], Sx, Sy)
                dp[mask] = min(dp[mask], dp[new_mask] + dist_to_s)
    
    return dp[(1 << N) - 1]

# Example usage
N = 4
items = [(4, 3), (0, 0), (3, 4),(1,2)]
S = (1,1)
print(solve_min_distance(N, items, S))
// picking items

